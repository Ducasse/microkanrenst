testCaro	| g |	g := [ :r | #acorn asLinkedList caro: r ] fresh.	self assert: g solutions all equals: {$a}.	g := [ :r | 	[ :x :y | 	| l m vl |	l := LinkedList new		add: #grape;		add: #raisin;		add: #pear;		yourself.	m := {(LinkedList with: #a).	(LinkedList with: #b).	(LinkedList with: #c)} asLinkedList.	vl := ValueLink new		value: x;		nextLink: y;		yourself.	(l caro: x) , (m caro: y) , (vl unifyWith: r) , (r unifyWith: vl) ] fresh ] fresh.	self assert: g solutions all equals: {{#grape . #a}}	testCdro	| g |	g := [ :r | [ :d | (#acorn asLinkedList cdro: d) , (d caro: r) ] fresh ] fresh.	self assert: g solutions all equals: {$c}.	g := [ :r | 	[ :x :y | 	| l m vl |	l := LinkedList new		add: #grape;		add: #raisin;		add: #pear;		yourself.	m := {(LinkedList with: $a).	(LinkedList with: $b).	(LinkedList with: $c)} asLinkedList.	vl := x asLink		nextLink: y;		yourself.	(l cdro: x) , (m caro: y) , (vl unifyWith: r) , (r unifyWith: vl) ] fresh ] fresh.	self		assert: g solutions all		equals:			{{{#raisin . #pear}.			$a}}.	g := [ :r | #acorn asLinkedList cdro: #corn asLinkedList ] fresh.	self assert: g solutions all equals: {0 asReifiedVar}.	g := [ :r | #acorn asLinkedList cdro: #acorn asLinkedList ] fresh.	self assert: g solutions all equals: {}.	g := [ :r | 	#corn asLinkedList		cdro:			{r.			$r.			$n} asLinkedList ] fresh.	self assert: g solutions all equals: {$o}.	g := [ :l | [ :x | (l caro: $a) , (l cdro: #corn asLinkedList) ] fresh ] fresh.	self assert: g solutions all equals: {#acorn}